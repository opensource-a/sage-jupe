Parameters:
  PermissionsBoundary:
    Type: String
    Default: 'arn:aws:iam::aws:policy/AdministratorAccess'
    Description: Permissions Boundary ARN for all roles 
  S3InputBucketName:
    Type: String
    Description: Bucket for input, output, notebook files     
  S3InputPrefix1:
    Type: String
    Default: 'cities'
    Description: Bucket prefix for input files
  S3InputPrefix2:
    Type: String
    Default: 'towns'
    Description: Bucket prefix for input files    
  S3TempBucketName:
    Type: String
    Description: Bucket for temp files
  S3NotebookPrefix:
    Type: String
    Default: 'notebook'
    Description: Bucket prefix for notebook files
  S3NotebookKey:
    Type: String
    Default: 'notebook.ipynb'
    Description: Notebook file key 
  ProcessingInstanceType:
    Type: String
    Default: 'ml.m5.large'
    Description: Processing Instance Type
  ProcessingJobSecurityGroup:
    Type: String
    Description: Processing Job Security Group
  ProcessingJobSubnetId:
    Type: String
    Description: Processing Job Subnet Id 
  Timestamp:
    Type: String
    Default: '00000000-000000'
    Description: Timestamp     

Resources:
  AthenaWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub '${AWS::StackName}-athena-workgroup-${AWS::AccountId}'
      State: ENABLED
      RecursiveDeleteOption: true
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: false
        PublishCloudWatchMetricsEnabled: true
        RequesterPaysEnabled: true
        ResultConfiguration:
          OutputLocation: !Sub 's3://${S3TempBucketName}/${AWS::StackName}/athena-query-output'
  GlueSchema1:
    Type: AWS::Glue::Schema
    Properties: 
      Compatibility: DISABLED
      DataFormat: AVRO
      Name: !Sub '${AWS::StackName}-${S3InputPrefix1}-schema'
      SchemaDefinition: '{"type" : "record","name" : "Cities", "fields" : [{"type": "string","name": "city"}, {"type": "string","name": "city_ascii"}, {"type": "double","name": "lat"}, {"type": "double", "name": "lng"}, {"type": "string","name": "country"},{"type": "string", "name": "iso2"}, {"type": "string", "name": "iso3"}, {"type": "string", "name": "admin_name"}, {"type": "string","name": "capital"},{"type": "double", "name": "population"},{"type": "double", "name": "id"}]}'
  GlueSchema2:
    Type: AWS::Glue::Schema
    Properties: 
      Compatibility: DISABLED
      DataFormat: AVRO
      Name: !Sub '${AWS::StackName}-${S3InputPrefix2}-schema'
      SchemaDefinition: '{"type" : "record","name" : "Towns", "fields" : [{"type": "string","name": "city"}, {"type": "string","name": "city_ascii"}, {"type": "double","name": "lat"}, {"type": "double", "name": "lng"}, {"type": "string","name": "country"},{"type": "string", "name": "iso2"}, {"type": "string", "name": "iso3"}, {"type": "string", "name": "admin_name"}, {"type": "string","name": "capital"},{"type": "double", "name": "population"},{"type": "double", "name": "id"}]}'      
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Sub '${AWS::StackName}-glue-db-${AWS::AccountId}'
  GlueTable1:
    # Creating the table waits for the database to be created
    DependsOn: 
    - GlueDatabase
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: !Sub '${AWS::StackName}-${S3InputPrefix1}'
        TableType: EXTERNAL_TABLE
        Parameters: {"classification": "csv", "delimiter": ",", "skip.header.line.count": "1"}
        StorageDescriptor:
          SchemaReference:
            SchemaVersionNumber: 1
            SchemaId: 
              SchemaArn: !GetAtt GlueSchema1.Arn
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub 's3://${S3InputBucketName}/${S3InputPrefix1}'
          SerdeInfo:
            Parameters:
              field.delim: ","
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
  GlueTable2:
    # Creating the table waits for the database to be created
    DependsOn: 
    - GlueDatabase
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: !Sub '${AWS::StackName}-${S3InputPrefix2}'
        TableType: EXTERNAL_TABLE
        Parameters: {"classification": "csv", "delimiter": ",", "skip.header.line.count": "1"}
        StorageDescriptor:
          SchemaReference:
            SchemaVersionNumber: 1
            SchemaId: 
              SchemaArn: !GetAtt GlueSchema2.Arn
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub 's3://${S3InputBucketName}/${S3InputPrefix2}'
          SerdeInfo:
            Parameters:
              field.delim: ","
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe      
  ExecuteNotebookClientRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-NotebookClientRole'
      PermissionsBoundary: !Ref PermissionsBoundary
      Description: >-
        A minimal role that lets the user run notebooks on demand or on a
        scheduler
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  ExecuteNotebookClientPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join 
        - '-'
        - - ExecuteNotebookClient
          - !Ref 'AWS::Region'
      Roles:
        - !Ref ExecuteNotebookClientRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'
 
  BasicExecuteNotebookRole:
    Type: 'AWS::IAM::Role'
    Properties:
      PermissionsBoundary: !Ref PermissionsBoundary    
      RoleName: !Sub '${AWS::StackName}-ExecuteNotebookRole'
      Description: >-
        A minimal role used as the default for running the notebook container in
        SageMaker Processing
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  ExecuteNotebookContainerPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join 
        - '-'
        - - ExecuteNotebookContainerPolicy
          - !Ref 'AWS::Region'
      Roles:
        - !Ref BasicExecuteNotebookRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: '*'
            Resource: '*'

  ContainerBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      PermissionsBoundary: !Ref PermissionsBoundary    
      RoleName: !Sub '${AWS::StackName}-ContainerBuildRole'
      Description: The role for building containers to be used with sagemaker_run_notebook
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: The role for running the sagemaker_run_notebook lambda
      RoleName: !Sub '${AWS::StackName}-LambdaExecutionRole'
      PermissionsBoundary: !Ref PermissionsBoundary      
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  BucketPermission:
    Type: AWS::Lambda::Permission
    DependsOn: 
    - InvokeNotebookLambda   
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref InvokeNotebookLambda
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${S3InputBucketName}"
  InvokeNotebookLambda:
    Type: 'AWS::Lambda::Function'
    DependsOn: 
    - LambdaExecutionRole
    - ExecuteNotebookClientRole
    - BasicExecuteNotebookRole
    - ContainerBuildRole
    Properties:
      FunctionName: !Sub '${AWS::StackName}-invoke'
      Description: A function to run Jupyter notebooks using SageMaker processing jobs
      Handler: index.lambda_handler
      Runtime: python3.7
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Timeout: 30
      Code:
        ZipFile: !Sub |
          _I='notebook'
          _H='StoppingCondition'
          _G='Outputs'
          _F='ProcessingInputs'
          _E='ClusterConfig'
          _D='ProcessingResources'
          _C='ProcessingOutputConfig'
          _B=None
          _A='Environment'
          import json,os,re,time,boto3
          def execute_notebook(*,image,input_path,output_prefix,notebook,parameters,role,instance_type,rule_name,extra_args):
          	b='LocalPath';a='S3Uri';Z='-';Y='/';R='AWS_DEFAULT_REGION';J=extra_args;I=rule_name;F=notebook;E=output_prefix;D=input_path;C=role;A=image;K=ensure_session();L=K.region_name;M=K.client('sts').get_caller_identity()['Account']
          	if not A:A='notebook-runner'
          	if Y not in A:A=f"{M}.dkr.ecr.{L}.amazonaws.com/${AWS::StackName}"
          	if':'not in A:A=A+':latest'
          	if not C:C=f"${AWS::StackName}-ExecuteNotebookRole"
          	if Y not in C:C=f"arn:aws:iam::{M}:role/{C}"
          	if E is _B:E=os.path.dirname(D)
          	if F==_B:F=D
          	N=os.path.basename(F);O,S=os.path.splitext(N);G=time.strftime('%Y-%m-%d-%H-%M-%S',time.gmtime());T=('${AWS::StackName}')[:62-len(G)]+Z+G;P='/opt/ml/processing/input/';U=P+os.path.basename(D);H='{}-{}{}'.format(O,G,S);Q='/opt/ml/processing/output/';B={_F:[{'InputName':_I,'S3Input':{a:D,b:P,'S3DataType':'S3Prefix','S3InputMode':'File','S3DataDistributionType':'FullyReplicated'}}],_C:{_G:[{'OutputName':'result','S3Output':{a:E,b:Q,'S3UploadMode':'EndOfJob'}}]},'ProcessingJobName':T,_D:{_E:{'InstanceCount':1,'InstanceType':instance_type,'VolumeSizeInGB':40}},_H:{'MaxRuntimeInSeconds':7200},'AppSpecification':{'ImageUri':A,'ContainerArguments':['run_notebook']},'RoleArn':C,_A:{}}
          	if J is not _B:B=merge_extra(B,J)
          	B[_A]['PAPERMILL_INPUT']=U;B[_A]['PAPERMILL_OUTPUT']=Q+H
          	if os.environ.get(R)!=_B:B[_A][R]=os.environ[R]
          	B[_A]['PAPERMILL_PARAMS']=json.dumps(parameters);B[_A]['PAPERMILL_NOTEBOOK_NAME']=N
          	if I is not _B:B[_A]['AWS_EVENTBRIDGE_RULE']=I
          	V=boto3.client('sagemaker');H=V.create_processing_job(**B);W=H['ProcessingJobArn'];X=re.sub('^.*/','',W);return X
          def merge_extra(orig,extra):
          	C='KmsKeyId';B=extra;A=dict(orig);A[_F].extend(B.get(_F,[]));A[_C][_G].extend(B.get(_C,{}).get(_G,[]))
          	if C in B.get(_C,{}):A[_C][C]=B[_C][C]
          	A[_D][_E]={**A[_D][_E],**B.get(_D,{}).get(_E,{})};A={**A,**{A:C for(A,C)in B.items()if A in['ExperimentConfig','NetworkConfig',_H,'Tags']},_A:{**orig.get(_A,{}),**B.get(_A,{})}};return A
          def ensure_session(session=_B):
          	'If session is None, create a default session and return it. Otherwise return the session passed in';A=session
          	if A is _B:A=boto3.session.Session()
          	return A
          def lambda_handler(event,context):A=event;B=execute_notebook(image=A.get('image'),input_path=A.get('input_path',"s3://${S3TempBucketName}/${S3NotebookPrefix}/${S3NotebookKey}"),output_prefix=A.get('output_prefix'),notebook=A.get(_I),parameters=A.get('parameters',dict()),role=A.get('role'),instance_type=A.get('instance_type',"${ProcessingInstanceType}"),rule_name=A.get('rule_name'),extra_args=A.get('extra_args',{"NetworkConfig": {"VpcConfig": {"SecurityGroupIds": ["${ProcessingJobSecurityGroup}"], "Subnets": ["${ProcessingJobSubnetId}"]}}}));return{'job_name':B}
