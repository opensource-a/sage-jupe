Parameters:
  PermissionsBoundary:
    Type: String
    Default: 'arn:aws:iam::aws:policy/AdministratorAccess'
    Description: Permissions Boundary ARN for all roles 

Resources:
  ExecuteNotebookClientRole:
    Type: 'AWS::IAM::Role'
    Properties:
      PermissionsBoundary: !Ref PermissionsBoundary
      Description: >-
        A minimal role that lets the user run notebooks on demand or on a
        scheduler
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  ExecuteNotebookClientPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join 
        - '-'
        - - ExecuteNotebookClient
          - !Ref 'AWS::Region'
      Roles:
        - !Ref ExecuteNotebookClientRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sagemaker:ListProcessingJobs'
              - 'sagemaker:DescribeProcessingJob'
              - 'sagemaker:StopProcessingJob'
            Resource: '*'
          - Sid: listrules
            Effect: Allow
            Action:
              - 'events:ListRules'
            Resource: '*'
          - Sid: runnotebookrule
            Effect: Allow
            Action:
              - 'events:DeleteRule'
              - 'events:PutTargets'
              - 'events:RemoveTargets'
              - 'events:DescribeRule'
              - 'events:EnableRule'
              - 'events:PutRule'
              - 'events:ListTargetsByRule'
              - 'events:DisableRule'
            Resource: 'arn:aws:events:*:*:rule/RunNotebook*'
          - Sid: runnotebooklambda
            Effect: Allow
            Action:
              - 'lambda:AddPermission'
              - 'lambda:InvokeFunction'
              - 'lambda:InvokeAsync'
              - 'lambda:RemovePermission'
            Resource: 'arn:aws:lambda:*:*:function:RunNotebook'
          - Sid: s3xfer
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Resource:
              - 'arn:aws:s3:::*SageMaker*'
              - 'arn:aws:s3:::*Sagemaker*'
              - 'arn:aws:s3:::*sagemaker*'
          - Sid: s3create
            Effect: Allow
            Action:
              - 's3:CreateBucket'
            Resource: '*'
  BasicExecuteNotebookRole:
    Type: 'AWS::IAM::Role'
    Properties:
      PermissionsBoundary: !Ref PermissionsBoundary    
      RoleName: !Join 
        - '-'
        - - BasicExecuteNotebookRole
          - !Ref 'AWS::Region'
      Description: >-
        A minimal role used as the default for running the notebook container in
        SageMaker Processing
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  ExecuteNotebookContainerPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Join 
        - '-'
        - - ExecuteNotebookContainerPolicy
          - !Ref 'AWS::Region'
      Roles:
        - !Ref BasicExecuteNotebookRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'cloudwatch:PutMetricData'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:CreateLogGroup'
              - 'logs:DescribeLogStreams'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
            Resource: '*'
          - Sid: s3xfer
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:PutObject'
            Resource:
              - 'arn:aws:s3:::*SageMaker*'
              - 'arn:aws:s3:::*Sagemaker*'
              - 'arn:aws:s3:::*sagemaker*'
          - Sid: vpcattach
            Effect: Allow
            Action:
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DescribeVpcs'
              - 'ec2:DescribeDhcpOptions'
              - 'ec2:DescribeSubnets'
              - 'ec2:DescribeSecurityGroups'
            Resource: '*'
  ContainerBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      PermissionsBoundary: !Ref PermissionsBoundary    
      RoleName: !Join 
        - '-'
        - - ExecuteNotebookCodeBuildRole
          - !Ref 'AWS::Region'
      Description: The role for building containers to be used with sagemaker_run_notebook
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:BatchGetImage'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:CreateRepository'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:PutImage'
                  - 'ecr:UploadLayerPart'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:DescribeLogStreams'
                Resource: '*'
              - Sid: s3xfer
                Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - 'arn:aws:s3:::*SageMaker*'
                  - 'arn:aws:s3:::*Sagemaker*'
                  - 'arn:aws:s3:::*sagemaker*'
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: The role for running the sagemaker_run_notebook lambda
      PermissionsBoundary: !Ref PermissionsBoundary      
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sagemaker:CreateProcessingJob'
                  - 'iam:PassRole'
                Resource: '*'
  InvokeNotebookLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: RunNotebook
      Description: A function to run Jupyter notebooks using SageMaker processing jobs
      Handler: index.lambda_handler
      Runtime: python3.7
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Timeout: 30
      Code:
        ZipFile: "_I='notebook'\n_H='StoppingCondition'\n_G='Outputs'\n_F='ProcessingInputs'\n_E='ClusterConfig'\n_D='ProcessingResources'\n_C='ProcessingOutputConfig'\n_B=None\n_A='Environment'\nimport json,os,re,time,boto3\ndef execute_notebook(*,image,input_path,output_prefix,notebook,parameters,role,instance_type,rule_name,extra_args):\n\tb='LocalPath';a='S3Uri';Z='-';Y='/';R='AWS_DEFAULT_REGION';J=extra_args;I=rule_name;F=notebook;E=output_prefix;D=input_path;C=role;A=image;K=ensure_session();L=K.region_name;M=K.client('sts').get_caller_identity()['Account']\n\tif not A:A='notebook-runner'\n\tif Y not in A:A=f\"{M}.dkr.ecr.{L}.amazonaws.com/{A}\"\n\tif':'not in A:A=A+':latest'\n\tif not C:C=f\"BasicExecuteNotebookRole-{L}\"\n\tif Y not in C:C=f\"arn:aws:iam::{M}:role/{C}\"\n\tif E is _B:E=os.path.dirname(D)\n\tif F==_B:F=D\n\tN=os.path.basename(F);O,S=os.path.splitext(N);G=time.strftime('%Y-%m-%d-%H-%M-%S',time.gmtime());T=('papermill-'+re.sub('[^-a-zA-Z0-9]',Z,O))[:62-len(G)]+Z+G;P='/opt/ml/processing/input/';U=P+os.path.basename(D);H='{}-{}{}'.format(O,G,S);Q='/opt/ml/processing/output/';B={_F:[{'InputName':_I,'S3Input':{a:D,b:P,'S3DataType':'S3Prefix','S3InputMode':'File','S3DataDistributionType':'FullyReplicated'}}],_C:{_G:[{'OutputName':'result','S3Output':{a:E,b:Q,'S3UploadMode':'EndOfJob'}}]},'ProcessingJobName':T,_D:{_E:{'InstanceCount':1,'InstanceType':instance_type,'VolumeSizeInGB':40}},_H:{'MaxRuntimeInSeconds':7200},'AppSpecification':{'ImageUri':A,'ContainerArguments':['run_notebook']},'RoleArn':C,_A:{}}\n\tif J is not _B:B=merge_extra(B,J)\n\tB[_A]['PAPERMILL_INPUT']=U;B[_A]['PAPERMILL_OUTPUT']=Q+H\n\tif os.environ.get(R)!=_B:B[_A][R]=os.environ[R]\n\tB[_A]['PAPERMILL_PARAMS']=json.dumps(parameters);B[_A]['PAPERMILL_NOTEBOOK_NAME']=N\n\tif I is not _B:B[_A]['AWS_EVENTBRIDGE_RULE']=I\n\tV=boto3.client('sagemaker');H=V.create_processing_job(**B);W=H['ProcessingJobArn'];X=re.sub('^.*/','',W);return X\ndef merge_extra(orig,extra):\n\tC='KmsKeyId';B=extra;A=dict(orig);A[_F].extend(B.get(_F,[]));A[_C][_G].extend(B.get(_C,{}).get(_G,[]))\n\tif C in B.get(_C,{}):A[_C][C]=B[_C][C]\n\tA[_D][_E]={**A[_D][_E],**B.get(_D,{}).get(_E,{})};A={**A,**{A:C for(A,C)in B.items()if A in['ExperimentConfig','NetworkConfig',_H,'Tags']},_A:{**orig.get(_A,{}),**B.get(_A,{})}};return A\ndef ensure_session(session=_B):\n\t'If session is None, create a default session and return it. Otherwise return the session passed in';A=session\n\tif A is _B:A=boto3.session.Session()\n\treturn A\ndef lambda_handler(event,context):A=event;B=execute_notebook(image=A.get('image'),input_path=A['input_path'],output_prefix=A.get('output_prefix'),notebook=A.get(_I),parameters=A.get('parameters',dict()),role=A.get('role'),instance_type=A.get('instance_type','ml.m5.large'),rule_name=A.get('rule_name'),extra_args=A.get('extra_args'));return{'job_name':B}\n"
